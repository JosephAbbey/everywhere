name: Release

on:
  push:
    tags:
    - 'v*'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Install latest Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        target: x86_64-unknown-linux-gnu

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --no-fail-fast
      env:
        CARGO_INCREMENTAL: '0'
        RUSTFLAGS: '-Zprofile'

  windows_build:
    name: Windows Build
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Install latest Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: x86_64-pc-windows-gnu

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --verbose --target=x86_64-pc-windows-gnu

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: x86_64-pc-windows-gnu.exe
        path: ./target/x86_64-pc-windows-gnu/release/everywhere.exe

  linux_build:
    name: Linux Build
    needs: test
    runs-on: ubuntu-latest

    outputs:
      help: ${{ steps.help.outputs.help }}

    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Install latest Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: x86_64-unknown-linux-gnu

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --verbose --target=x86_64-unknown-linux-gnu

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: x86_64-unknown-linux-gnu
        path: ./target/x86_64-unknown-linux-gnu/release/everywhere

  node_build:
    name: NodeJS Build
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Install latest Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: x86_64-pc-windows-gnu

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --manifest-path ./node/Cargo.toml --release --verbose
    
    - name: Copy build artifacts
      run: |
        cp ./node/target/release/everywhere.dll ./everywhere/index.node

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: node-unknown-unknown.node
        path: ./target/x86_64-pc-windows-gnu/release/everywhere.exe

  web_build:
    name: GitHub Pages (Web) Build
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Install latest Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: wasm32-unknown-unknown

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --lib --release --verbose --target wasm32-unknown-unknown

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: wasm32-unknown-unknown.wasm
        path: ./target/wasm32-unknown-unknown/release/customasm.wasm

    - name: Copy artifact
      run: cp ./target/wasm32-unknown-unknown/release/customasm.wasm ./web

    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v0
      with:
        path: ./web
        retention-days: 1

  standalone_web_build:
    name: Standalone Web Build
    needs: web_build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Download Web Build
      uses: actions/download-artifact@v3
      with:
        name: wasm32-unknown-unknown.wasm
        path: ./web

    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install node modules
      run: npm i node-html-parser minify

    - name: Collect files
      run: node ./htmlCollector.js ./web/index.html ./web/customasm.html

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: any-unknown-any-web.html
        path: ./web/customasm.html

  deploy:
    name: Deploy to GitHub Pages
    needs: web_build
    runs-on: ubuntu-latest

    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v2

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  release:
    needs: [windows_build, linux_build, standalone_web_build, deploy]
    runs-on: ubuntu-latest

    environment:
      name: github-releases
      url: ${{ steps.create_release.outputs.html_url }}

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: |
          New release!

          - Try on the web: ${{ needs.deploy.outputs.page_url }}
        draft: false
        prerelease: false

    - name: Download Windows Build
      uses: actions/download-artifact@v3
      with:
        name: x86_64-pc-windows-gnu.exe

    - name: Download Linux Build
      uses: actions/download-artifact@v3
      with:
        name: x86_64-unknown-linux-gnu

    - name: Download Standalone Web Build
      uses: actions/download-artifact@v3
      with:
        name: any-unknown-any-web.html

    - name: Prepare Release asset
      run: zip -r customasm.zip .

    - name: Upload Release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./customasm.zip
        asset_name: customasm.zip
        asset_content_type: application/zip